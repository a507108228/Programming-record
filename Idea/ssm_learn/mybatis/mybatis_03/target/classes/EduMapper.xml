<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lzw.dao.EduMapper">
<!--    mapper中配置二级缓存    -->
<!--
eviction：回收策略
   最近最少使用lru（默认）
   先进先出fifo
   移除垃圾回收器状态和软引用规则的对象soft
   比上面更加积极的弱引用weak
flushInterval：缓存刷新间隔 多久清空一次 默认不清空
readOnly：缓存是否只读 true 只读——所有从缓存中获取的都是只读不会修改数据
                       false 非只读 会认为数据会被修改 反序列 序列进行克隆数据
blocking：
size：缓存中存储多少元素
type：指定自定义缓存的全类名
   -->

    <cache eviction="LRU" flushInterval="60000" readOnly="false" blocking=""
           size="1024"
    ></cache>

    <!-- 查询所有 返回list -->
    <select id="getEduList" resultType="com.lzw.pojo.Edu">
        select *
        from edu
    </select>

    <select id="getEduById" resultType="com.lzw.pojo.Edu">
        select *from edu where id=#{id}
    </select>

    <!--    -->
    <update id="updateEdu1">
        update edu
        <trim prefix="set" suffixOverrides=",">

            <if test="name != null">
                name = #{name},
            </if>

            <if test="gender != null">
                gender = #{gender},
            </if>

            <if test="school!=null">
                school = #{school},
            </if>

            <if test="grade != null">
                grade = #{grade}
            </if>

        </trim>
        where id = #{id}
    </update>

<!--        void addEdu(@Param("edu")List<Edu> edu);
-->
    <insert id="addEdu">
        insert into edu(name,gender,school,grade)values
        <foreach item="item" collection="edu" separator=",">
            (#{item.name},#{item.gender},#{item.school},#{item.grade})
        </foreach>
    </insert>



</mapper>
